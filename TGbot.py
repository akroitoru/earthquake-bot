import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta
import nest_asyncio
import db_manager
from fetch_data import fetch_earthquake_data
from db_manager import (save_earthquakes_to_db, get_all_users, get_new_earthquakes, mark_as_notified, db_connection)
import os
from dotenv import load_dotenv
load_dotenv()

nest_asyncio.apply()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"{user.first_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è—Ö!\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è—Ö.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/test - —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π\n"
        "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )


async def fetch_and_save_earthquakes():
    while True:
        try:
            earthquakes = await asyncio.to_thread(fetch_earthquake_data)
            if earthquakes:
                await asyncio.to_thread(save_earthquakes_to_db, earthquakes)
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            await asyncio.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await asyncio.sleep(300)


async def check_for_new_earthquakes(app):
    while True:
        try:
            new_earthquakes = await asyncio.to_thread(get_new_earthquakes)
            if not new_earthquakes:
                await asyncio.sleep(60)
                continue

            users = await asyncio.to_thread(get_all_users)
            quake_ids = []

            for eq in new_earthquakes:
                eq_id, location, mag, time, url, radius = eq
                quake_ids.append(eq_id)

                message = (
                    f"üö® –ù–æ–≤–æ–µ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ!\n"
                    f"‚ñ´Ô∏è –ú–∞–≥–Ω–∏—Ç—É–¥–∞: {mag}\n"
                    f"‚ñ´Ô∏è –ú–µ—Å—Ç–æ: {location}\n"
                    f"‚ñ´Ô∏è –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {url}"
                )

                for chat_id in users:
                    try:
                        await app.bot.send_message(
                            chat_id=chat_id,
                            text=message,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

            if quake_ids:
                await asyncio.to_thread(mark_as_notified, quake_ids)

            await asyncio.sleep(60)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π: {str(e)}")
            await asyncio.sleep(300)


async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    with db_connection() as conn:
        if conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM users WHERE chat_id = %s;", (chat_id,))
                conn.commit()
    await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    test_msg = (
        "üö® [–¢–ï–°–¢] –ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ!\n"
        "‚ñ´Ô∏è –ú–∞–≥–Ω–∏—Ç—É–¥–∞: 4.5\n"
        "‚ñ´Ô∏è –ú–µ—Å—Ç–æ: Test Location\n"
        "‚ñ´Ô∏è –í—Ä–µ–º—è: 2024-01-01 12:00:00\n"
        "üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: example.com"
    )
    await update.message.reply_text(test_msg)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total, max_mag, avg_mag = db_manager.get_stats()
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π:\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total}\n"
        f"‚ñ´Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç—É–¥–∞: {max_mag:.1f}\n"
        f"‚ñ´Ô∏è –°—Ä–µ–¥–Ω—è—è –º–∞–≥–Ω–∏—Ç—É–¥–∞: {avg_mag:.1f}"
    )
    await update.message.reply_text(stats_text)


async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("stats", stats_command))

    asyncio.create_task(fetch_and_save_earthquakes())
    asyncio.create_task(check_for_new_earthquakes(application))

    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())